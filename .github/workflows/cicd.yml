name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: npm run test:ci
        
      - name: Upload coverage reports to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  docker:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
          
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: 497986631333.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: fiap-vehicle-management-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: Output image URI
        env:
          ECR_REGISTRY: 497986631333.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: fiap-vehicle-management-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Latest URI: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to Amazon ECS
        env:
          ECS_CLUSTER: fiap-vehicle-management-cluster
          ECS_SERVICE: fiap-vehicle-management-service
        run: |
          echo "üöÄ Deploying to ECS cluster: $ECS_CLUSTER"
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region us-east-1
          
          echo "‚è≥ Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region us-east-1
          
          echo "‚úÖ Deployment completed successfully!"
      
      - name: Verify deployment
        run: |
          ALB_URL="http://fiap-vehicle-management-alb-1408414491.us-east-1.elb.amazonaws.com"
          echo "üîç Verifying deployment at: $ALB_URL/health"
          
          sleep 30
          
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $ALB_URL/health)
          if [ $HEALTH_STATUS -eq 200 ]; then
            echo "‚úÖ Health check passed! Service is running correctly."
            echo "üåê Swagger UI: $ALB_URL/api-docs" 
            echo "üíö Health endpoint: $ALB_URL/health"
            echo "üöó API: $ALB_URL/api/veiculos"
          else
            echo "‚ùå Health check failed! HTTP status: $HEALTH_STATUS"
            exit 1
          fi
