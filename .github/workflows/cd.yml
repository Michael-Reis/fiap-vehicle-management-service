name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test -- --watchAll=false

    - name: Build application
      run: npm run build

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r dist/ deployment/
        cp package.json deployment/
        cp package-lock.json deployment/
        cd deployment && tar -czf ../deployment.tar.gz .

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package-staging
        path: deployment.tar.gz
        retention-days: 30

    # Placeholder for AWS deployment - to be configured later
    - name: Deploy to AWS (Placeholder)
      run: |
        echo "🚀 Deployment to AWS will be configured here"
        echo "📦 Deployment package ready: deployment.tar.gz"
        echo "🌐 Target: Staging Environment"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test -- --watchAll=false

    - name: Build application
      run: npm run build

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r dist/ deployment/
        cp package.json deployment/
        cp package-lock.json deployment/
        cd deployment && tar -czf ../deployment.tar.gz .

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package-production
        path: deployment.tar.gz
        retention-days: 90

    # Placeholder for AWS deployment - to be configured later
    - name: Deploy to AWS Production (Placeholder)
      run: |
        echo "🚀 Deployment to AWS Production will be configured here"
        echo "📦 Deployment package ready: deployment.tar.gz"
        echo "🌐 Target: Production Environment"
        echo "🏷️  Tag: ${{ github.ref_name }}"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Staging deployment successful"
        elif [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
          echo "❌ Staging deployment failed"
        fi
        
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment successful"
        elif [ "${{ needs.deploy-production.result }}" == "failure" ]; then
          echo "❌ Production deployment failed"
        fi
